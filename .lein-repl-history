(use '[picture-gallery.models.schema])
(create-users-table)
quir
quit
(use '[picture-gallery.models.schema])
(create-users-table)
quit
(use '[picture-gallery.models.schema])
(use '[picture-gallery.models.db])
(create-users-table)
db
(create-users-table)
(use '[picture-gallery.models.db])
(create-users-table)
(use '[picture-gallery.models.db] :reload)
(create-users-table)
(use '[picture-gallery.models.db] :reload)
(sql/with-connection db
(sql/with-query-results res ["select * from users"] (println res)))
(require '[clojure.java.jdbc :as sql])
(sql/with-connection db
(sql/with-query-results res ["select * from users"] (println res)))
(use '[picture-gallery.routes.upload])
(ImageIO/write
(scale (ImageIO/read (io/input-stream "image.png")) 0.5 150 150) "png"
(File. "scaled.png"))
(require '[picture-gallery.routes.upload])
(ImageIO/write
(scale (ImageIO/read (io/input-stream "image.png")) 0.5 150 150) "png"
(File. "scaled.png"))
quit
(use '[picture-gallery.models.schema])
(create-images-table)
quit
(use '[picture-gallery.routes.aut])
(use '[picture-gallery.routes.auth])
(use '[picture-gallery.models.schema])
(create-gallery-path)
(db/create-user {:id a :pass (crypt/encrypt locos)})
(create-user {:id a :pass (crypt/encrypt locos)})
(use '[picture-gallery.models.db])
(create-user {:id a :pass (crypt/encrypt locos)})
(create-user {:id "a" :pass (crypt/encrypt "locos")})
(require '[noir.util.crypt :as crypt])
(create-user {:id "a" :pass (crypt/encrypt "locos")})
